{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/./src/taskpane/taskpane.js","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\nOffice.onReady((info) => {\n  console.log(info);\n  if (info.host === Office.HostType.Outlook) {\n    //document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    //document.getElementById(\"run\").onclick = run;\n    //document.getElementById(\"cases\").onclick = cases;\n    document.getElementById(\"submit\").onclick = saveNote;\n    document.getElementById(\"credentials-crm-done\").onclick = login_user_validation;\n    document.getElementById(\"case-selector\").onclick = getCaseSelected;\n    document.getElementById(\"case-linked\").onclick = getLinkedCaseSelected;\n    initialSubject();\n    infoFromEmail();\n    display_initial_panes();\n    readClipboardFromDevTools().then((r) => console.log(\"Returned value: \", r));\n\n    parent.document.addEventListener(\"selectionchange\", (e) => {\n      console.log(\"Archor node - \", window.getSelection().anchorNode);\n      console.log(\"Focus Node - \", window.getSelection().toString());\n    });\n\n    getSelectionText();\n    console.log(\"Clipboard in taskpane.js\");\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        console.log(\"Pasted content: \", text);\n      })\n      .catch((err) => {\n        console.error(\"Failed to read clipboard contents: \", err);\n      });\n  }\n});\n\n\nfunction getSelectionText() {\n  console.log(\"inside getSelectionTExt\");\n  var text = \"\";\n  var activeEl = document.activeElement;\n  var activeElTagName = activeEl ? activeEl.tagName.toLowerCase() : null;\n  if (\n    activeElTagName == \"textarea\" ||\n    (activeElTagName == \"input\" &&\n      /^(?:text|search|password|tel|url)$/i.test(activeEl.type) &&\n      typeof activeEl.selectionStart == \"number\")\n  ) {\n    text = activeEl.value.slice(activeEl.selectionStart, activeEl.selectionEnd);\n  } else if (window.getSelection) {\n    text = window.getSelection().toString();\n  }\n  console.log(text);\n  return text;\n}\n\nfunction readClipboardFromDevTools() {\n  return new Promise((resolve, reject) => {\n      const _asyncCopyFn = (async () => {\n          try {\n              const value = await navigator.clipboard.readText();\n              console.log(`${value} is read!`);\n              resolve(value);\n          } catch (e) {\n              reject(e);\n          }\n          window.removeEventListener(\"focus\", _asyncCopyFn);\n      });\n  \n      window.addEventListener(\"focus\", _asyncCopyFn);\n      console.log(\"Hit <Tab> to give focus back to document (or we will face a DOMException);\");\n  });\n}\n\n\nexport async function get_copied_text() {\n  const range = window.getSelection();\n  console.log(\"get_copied_text, range selection\");\n  console.log(range.toString());\n  console.log(range);\n  /* copia solo lo del tab\n  document.addEventListener(\"selectionchange\", (e) => {\n    console.log(\"Archor node - \", window.getSelection().anchorNode);\n    console.log(\"Focus Node - \", window.getSelection().toString());\n  });\n*/\n  console.log(\"get_copied_text, text variable\");\n  var text = \"\";\n  if (window.getSelection) {\n    text = window.getSelection().toString();\n  } else if (document.selection && document.selection.type != \"Control\") {\n    text = document.selection.createRange().text;\n  }\n  console.log(text);\n\n  const permission = await navigator.permissions.query({ name: \"clipboard-read\" });\n  var salida = \"\";\n  navigator.clipboard.readText().then((clipText) => (salida = clipText));\n  console.log(\"get_copied_text, navigator\");\n  console.log(salida);\n}\n\nexport async function display_initial_panes() {\n  let config;\n  console.log(\"display_initial_panes\");\n  config = getConfig();\n  console.log(config);\n  if (config.applicationUserName != null) {\n    clean_up_error();\n    hide_login_panel();\n    user_logged_in();\n    initialLoginExistent();\n  } else {\n    login_panel_only();\n  }\n}\n\nexport async function initialLoginExistent() {\n  let config;\n  console.log(\"initialLoginExistent\");\n  config = getConfig();\n  document.getElementById(\"crm-user\").value = config.applicationUserName;\n  document.getElementById(\"crm-pass\").value = config.applicationPassName;\n  login_user_validation();\n}\n\nexport async function login_user_validation() {\n  var userTyped = document.getElementById(\"crm-user\").value;\n  var passTyped = document.getElementById(\"crm-pass\").value;\n  // response=token obtained\n  let response = await getToken(userTyped, passTyped);\n  if (response === null) {\n    display_error(\"The user and password provided are not valid\");\n  } else {\n    clean_up_error();\n    hide_login_panel();\n    display_cases_form();\n    setValidConfig(userTyped, passTyped);\n    await getEmailLinked(response);\n    await getDashboardInfo(response);\n  }\n}\n\nexport async function initialSubject() {\n  // Get a reference to the current message\n  const item = Office.context.mailbox.item;\n  // Write message property value to the task pane\n  document.getElementById(\"fsubject\").value = item.normalizedSubject;\n}\n\nexport async function infoFromEmail() {\n  // Get a reference to the current message\n  const item = Office.context.mailbox.item;\n  console.log(\"infoFromEmail\");\n  console.log(item);\n  // Get the address entities from the item.\n  const entities = Office.context.mailbox.item.getEntities();\n  // Check to make sure that address entities are present.\n  if (null != entities && null != entities.addresses && undefined != entities.addresses) {\n    //Addresses are present, so use them here.\n    console.log(entities);\n  }\n\n  const bodyEmail = Office.context.mailbox.item.body;\n  console.log(bodyEmail);\n\n  // This example gets the body of the item as plain text.\n  Office.context.mailbox.item.body.getAsync(\n    \"text\",\n    { asyncContext: \"This is passed to the callback\" },\n    function callback(result) {\n      // Do something with the result.\n      console.log(\"log result\");\n      console.log(result);\n    }\n  );\n  /*\n  Office.context.mailbox.item.body.getSelectedDataAsync(\n    \"text\", // coercionType\n    {\n      valueFormat: \"unformatted\", // valueFormat\n      filterType: \"all\",\n    }, // filterType\n    function (result) {\n      // callback\n      const dataValue = result.value;\n      // write('Selected data is: ' + dataValue);\n      console.log(\"Selected data is: \" + dataValue);\n    }\n  );*/\n}\n\nexport async function getCaseSelected() {\n  console.log(\"entro a case selected\");\n  var valorgetCaseSeclected = $(\"#case-selector\").serialize();\n  console.log(valorgetCaseSeclected);\n  document.getElementById(\"fcaseid\").value = valorgetCaseSeclected.split(\"=\")[1];\n  //lockFormCasesLinked();\n  //unlockForm(\"cases-selector-panel\");\n}\n\nexport async function getLinkedCaseSelected() {\n  console.log(\"getLinkedCaseSelected\");\n  var valorgetCaseSeclected1 = $(\"#case-linked\").serialize();\n  document.getElementById(\"fcaseid\").value = valorgetCaseSeclected1.split(\"=\")[1];\n  //unlockForm(\"cases-linked-panel\");\n  //lockFormCasesVisited();\n}\n\nexport async function run() {\n  let config;\n  let tokenFromUser;\n  config = getConfig();\n  tokenFromUser = await recentlyVisitedCases(config.applicationUserName, config.applicationPassName);\n\n  // Write message property value to the task pane\n  console.log(\"item element\");\n  //console.log(item);\n  document.getElementById(\"item-subject\").innerHTML = \"<b>Subject:</b> <br/>\" + item.subject;\n  console.log(config.applicationUserName);\n  console.log(tokenFromUser);\n  //Get the active cases with the id's\n}\n\nexport async function cases() {\n  // Get a reference to the current message\n  let config;\n  config = getConfig();\n  await recentlyVisitedCases(config.applicationUserName, config.applicationPassName);\n\n  // Write message property value to the task pane\n  //console.log(\"item element\");\n  //console.log(item);\n  //document.getElementById(\"cases-list\").innerHTML = \"<b>Subject:</b> <br/>\" + item.subject;\n  //console.log(config.applicationUserName);\n}\n\nexport async function saveNote() {\n  //Case Id\n  var fcaseidObtained = document.getElementById(\"fcaseid\").value;\n  //Subject\n  var fsubjectObtained = document.getElementById(\"fsubject\").value;\n  //Note\n  var fnoteObtained = document.getElementById(\"fnote\").value;\n\n  console.log(\"Enter in save Note\");\n  console.log(fcaseidObtained);\n  console.log(fsubjectObtained);\n  console.log(fnoteObtained);\n\n  let config;\n  config = getConfig();\n  console.log(config.applicationUserName);\n  console.log(config.applicationPassName);\n\n  let response = await saveNoteCRM(\n    config.applicationUserName,\n    config.applicationPassName,\n    fcaseidObtained,\n    fsubjectObtained,\n    fnoteObtained\n  );\n\n  console.log(\"response from notes\");\n  console.log(response);\n\n  const emailHash = Office.context.mailbox.item.conversationId;\n  let response2 = await saveEmailChain(\n    config.applicationUserName,\n    config.applicationPassName,\n    fcaseidObtained,\n    emailHash\n  );\n\n  if (response === null || response2 === null) {\n    display_error(\"The note is not valid\");\n  } else {\n    display_success(\"The note was stored successfully\");\n  }\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["__webpack_require__","console","log","config","getConfig","applicationUserName","clean_up_error","hide_login_panel","user_logged_in","initialLoginExistent","login_panel_only","document","getElementById","value","applicationPassName","login_user_validation","userTyped","passTyped","getToken","response","display_error","display_cases_form","setValidConfig","getEmailLinked","getDashboardInfo","item","Office","context","mailbox","normalizedSubject","entities","getEntities","addresses","undefined","bodyEmail","body","getAsync","asyncContext","result","getCaseSelected","valorgetCaseSeclected","$","serialize","split","getLinkedCaseSelected","valorgetCaseSeclected1","saveNote","fcaseidObtained","fsubjectObtained","fnoteObtained","saveNoteCRM","emailHash","conversationId","saveEmailChain","response2","display_success","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","onReady","info","host","HostType","Outlook","style","display","onclick","initialSubject","infoFromEmail","display_initial_panes","Promise","resolve","reject","_asyncCopyFn","navigator","clipboard","readText","window","removeEventListener","addEventListener","then","r","parent","e","getSelection","anchorNode","toString","text","activeEl","activeElement","activeElTagName","tagName","toLowerCase","test","type","selectionStart","slice","selectionEnd","getSelectionText","catch","err","error"],"sourceRoot":""}