{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/./src/commands/commands.js","webpack://office-addin-taskpane/webpack/runtime/global"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event {Office.AddinCommands.Event}\n */\nfunction action(event) {\n  const message = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // Be sure to indicate when the add-in command function is complete\n  event.completed();\n}\n\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n    ? global\n    : undefined;\n}\n\nconst g = getGlobal();\n\n// The add-in command functions need to be available in global scope\ng.action = action;\n\n\n//Add commands\nlet config;\nlet btnEvent;\n\n// The initialize function must be run each time a new page is loaded.\nOffice.initialize = function () {\n};\n\nfunction showError(error) {\n  Office.context.mailbox.item.notificationMessages.replaceAsync('github-error', {\n    type: 'errorMessage',\n    message: error\n  }, function(result){\n  });\n}\n\nlet settingsDialog;\n\nfunction insertDefaultGist(event) {\n\n  config = getConfig();\n\n  // Check if the add-in has been configured.\n  if (config && config.defaultGistId) {\n    // Get the default gist content and insert.\n    try {\n      getGist(config.defaultGistId, function(gist, error) {\n        if (gist) {\n          buildBodyContent(gist, function (content, error) {\n            if (content) {\n              Office.context.mailbox.item.body.setSelectedDataAsync(content,\n                {coercionType: Office.CoercionType.Html}, function(result) {\n                  event.completed();\n              });\n            } else {\n              showError(error);\n              event.completed();\n            }\n          });\n        } else {\n          showError(error);\n          event.completed();\n        }\n      });\n    } catch (err) {\n      showError(err);\n      event.completed();\n    }\n\n  } else {\n    // Save the event object so we can finish up later.\n    btnEvent = event;\n    // Not configured yet, display settings dialog with\n    // warn=1 to display warning.\n    const url = new URI('dialog.html?warn=1').absoluteTo(window.location).toString();\n    const dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n    Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n      settingsDialog = result.value;\n      settingsDialog.addEventHandler(Office.EventType.DialogMessageReceived, receiveMessage);\n      settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\n    });\n  }\n}\n\n// Register the function.\nOffice.actions.associate(\"insertDefaultGist\", insertDefaultGist);\nOffice.actions.associate(\"insertCredentials\", insertCredentials);\n\nfunction receiveMessage(message) {\n  config = JSON.parse(message.message);\n  setConfig(config, function(result) {\n    settingsDialog.close();\n    settingsDialog = null;\n    btnEvent.completed();\n    btnEvent = null;\n  });\n}\n\nfunction dialogClosed(message) {\n  settingsDialog = null;\n  btnEvent.completed();\n  btnEvent = null;\n}\n\n\nfunction insertCredentials(event) {\n  console.log('inside insert credentials');\n  config = getConfig();\n\n  // Check if the add-in has been configured.\n  if (config && config.applicationUserName && config.applicationPassName) {\n    // Get the default gist content and insert.\n    try {\n      getToken(config.applicationUserName, config.applicationPassName, function(gist, error) {\n        if (gist) {\n          console.log('-- gist');\n          console.log(gist);\n          console.log('--gist 2');\n          console.log(gist.data.user);\n          buildBodyContent(gist, function (content, error) {\n            if (content) {\n              /*\n              Office.context.mailbox.item.body.setSelectedDataAsync(content,\n                {coercionType: Office.CoercionType.Html}, function(result) {\n                  event.completed();\n              });\n              */\n             console.log('--data');\n             console.log(content);\n            } else {\n              showError(error);\n              event.completed();\n            }\n          });\n        } else {\n          showError(error);\n          event.completed();\n        }\n      });\n    } catch (err) {\n      showError(err);\n      event.completed();\n    }\n\n  } else {\n    // Save the event object so we can finish up later.\n    btnEvent = event;\n    // Not configured yet, display settings dialog with\n    // warn=1 to display warning.\n    const url = new URI('dialog.html?warn=1').absoluteTo(window.location).toString();\n    const dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n    Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n      settingsDialog = result.value;\n      settingsDialog.addEventHandler(Office.EventType.DialogMessageReceived, receiveMessage);\n      settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\n    });\n  }\n}\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["config","btnEvent","settingsDialog","__webpack_require__","showError","error","Office","context","mailbox","item","notificationMessages","replaceAsync","type","message","result","receiveMessage","JSON","parse","setConfig","close","completed","dialogClosed","g","globalThis","this","Function","e","window","onReady","self","global","undefined","action","event","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","initialize","actions","associate","getConfig","defaultGistId","getGist","gist","buildBodyContent","content","body","setSelectedDataAsync","coercionType","CoercionType","Html","err","url","URI","absoluteTo","location","toString","ui","displayDialogAsync","width","height","displayInIframe","value","addEventHandler","EventType","DialogMessageReceived","DialogEventReceived","console","log","applicationUserName","applicationPassName","getToken","data","user"],"sourceRoot":""}